Django



Django — это высокоуровневый веб-фреймворк на языке Python, который позволяет 
быстро и эффективно разрабатывать веб-приложения.

Виртуальное   (Virtual Environment) - это изолированное цифровое пространство, которое позволяет 
устанавливать пакеты и модули независящие от тех, которые находятся вне виртуального окружения.
То есть можно установить 10 версию пайтона и 5 версию джанго в виртуальном окружении, в то время как 
в общем у вас на компуктере будет стоять 12 версия пайтона и 4 версия джанго.

Виртуальное окружение нужно для изоляции проекта от внешних пакетов версий и тд,
и для дальнейшей его портативности проекта.

Чтоб создать виртуальное окружение прописываем след команду:

python3 -m venv название_виртуального_окружения

Затем в текущей директории создастся папка, которая и будет представлять виртуальное окружение.
Но для начала работы нужно его запустить:

source djvenv/bin/activate

Это путь учитывая то что виртуальное окружение называется djvenv.
После запуска виртуального окружения появится название виртуального окружения в начале строки:
(djvenv) dima@MacBook-Pro-Dmitriy django %

Теперь в это окружение нужно установить django

pip install django==4.2

Для вывода консольных команд django нужно прописать

django-admin

Создаем проект джанго

django-admin startproject название_проекта

Для выполнения команд джанго, которые касаются данного проекта используем созданный автоматически manage.py
Чтоб запустить локальный джанго сервер используем след команду

python3 manage.py runserver

Чтоб положить джанго сервер просто заканчиваем процесс с помощью control+C

Также можно изменить стандартный порт 8000 на свой

python3 manage.py runserver 1234



Принцип работы Django (Модель MTV)

Маршрутизация 

Это процесс сопоставления шаблонов и url адреса
Пример:
127.0.0.1:8000/category/1/

Например этот пример может соответствовать шаблону 

category/<число>

Затем если нашелся шаблон сработает представление (view), представлением может быть функция или класс,  
если же шаблона к url не было найдено, будет сгенерирована ошибка 404.

Ответом на запрос (url, введенный в браузер) будет html страничка.
Эта html страничка будет формироваться из двух составляющих:
Model - это информация, данные, их формирует та самая функция или класс
Template - это html страничка, в которую будут вставляться данные.

Таким образом клиент по итогу получит готовую html страничку.

Поэтому эта модель и называется MTV (Models, Templates, Views)


По философии джанго каждая самостоятельная часть сайта должна представляться в виде отдельного приложения.
Все эти приложения нужно создавать максимально независящие от друг друга.

Создаем приложение через все тот же manage.py

python3 manage.py startapp helloworld

После создания в директории нашего приложения появится директория helloworld (в данном случае).
В ней будут след файлы

helloworld-
  -migrations (папка для создания миграций, хз что это)
  -admin.py (для создания админки приложения)
  -apps.py (конфигурация текущего приложения)
  -models.py (для создания ORM моделей, для создания бд)
  -tests.py (для создания тестов)
  -views.py (для хранения представлений текущего приложения)


Но также помимо создания, нужно зарегистрировать это приложение.
Для этого переходим в каталог конфигов проекта (эта папка имеет такое же название как и сама папка проэкта)
и в ней будет файл settings.py, в нем будет коллекция INSTALLED_APPS, в нее добавляем строку с названием нашего приложения

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'helloworld',     # вот так
]

Джанго при обращении к созданному пакету (все приложения это по факту пакеты), будет переходить в apps.py
и в класс конфигов HelloworldConfig, так что можно явно указать переход к этому классу:

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'helloworld.apps.HelloworldConfig',
]



Создание представления (views)

Представлением является функция или класс, поэтому сначала эту функцию или класс нужно где то написать.
В приложении, в котором хотим создать представление, есть файл views.py, в нем и хранятся все вьюшки.

Создадим первое революционное представление, которое по настоящему изменит наше приложение, выведем Hello World
Для решения этой задачи подойдет след вьюшка:

from django.http import HttpResponse


def print_helloworld(request):
    return HttpResponse('Hello, World!')

В данном случае вьюшка не обрабатывает никакой Model и Template тоже никакие не используются.
Первое, что мы добавили в файл это импорт класса HttpResponse, он нужен для создания ответов н HTTP request.
Эта функция-представление принимает request, то есть запрос, а если точнее HTTP запрос.
А возвращает объект класса HttpResponse, то есть ответ на HTTP request. 

Но для того чтоб это представление работало его нужно указать в конфиге.
/firstproject/firstproject/urls.py

Нам нужно сопоставить определенный путь с нашей вьюшкой.
Добавляем в коллекцию urlpatterns след строчку:

path('helloworld', print_helloworld)

Сначала указываем суффикс url адреса (в этом случае вьюшка будет доступна по url: http://127.0.0.1:8000/helloworld),
потом указываем вьюшку которую будет отображать, но перед этим эту вьюшку нужно импортировать:

from helloworld.views import print_helloworld

И теперь вьюшка будет отрабатывать!!!

Я добавлю еще одну вьюшку, которая будет просто выводить текст.
Также важно понимать, что после того как мы добавили хоть один путь, главная страница больше не будет отображаться,
поэтому давайте добавим свою главную страницу.

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', print_helloworld),  # для этого просто укажем пустой суффикс
    path('helloworld/', print_helloworld),
    path('categories/', categories)
]

Также одна вьюшка может отрабатывать на множество путей (как в этом примере hello world).
Но что если у нашего супер проекта будет очень много вьюшек, их будет не удобно прописывать в импорте, поэтому можно сделать так:

from helloworld import views  # импортируем пространство имен views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.print_helloworld),
    path('helloworld/', views.print_helloworld),  # и из него уже вьюшки
    path('categories/', views.categories)
]

Но если мы захотим перенести наше приложение на другой сайт, то нужно будет в файле urls.py нового проекта прописывать все пути, а это нарушает принцип независимости приложений.
Поэтому мы можем сделать так:

from django.contrib import admin
from django.urls import path, include
from helloworld import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('helloworld.urls')),  # вместо всех путей в функции include укажем где лежат все пути приложения
]

Также создадим в папке приложения файл urls.py:

from django.urls import path
from . import views

urlpatterns = [
    path('', views.print_helloworld),
    path('helloworld/', views.print_helloworld),
    path('categories/', views.categories)
]

И уже сюда добавим все пути приложения.
Также для всех путей одного приложения можно добавить общий суффикс.
Его указываем в общем файле конфигов.

path('hwapp/', include('helloworld.urls')),  # Его добавляем сюда

И теперь пути буду выглядеть так:

urlpatterns = [
    path('', views.print_helloworld),  # http://127.0.0.1:8000/hwapp/
    path('helloworld/', views.print_helloworld),  # http://127.0.0.1:8000/hwapp/helloworld/
    path('categories/', views.categories)  # http://127.0.0.1:8000/hwapp/categories/
]


Отладка проекта

В процессе разработки для понимания работы программы часто используют дебагер, который позволяет остановить 
программу в определенном месте.
Но как это сделать в проекте джанго?
1) Переходим в RUN AND DEBUG
2) Тыкаем create a launch.json file
3) Затем Python Debugger -> Django -> Browse Files...
4) Выбираем файл manage.py проекта, который собираемся отлаживать (или откладывать?).
5) И все, теперь можно запустить сервер одной кнопкой или если поставить брейкпоинт на какой-то вьюшке, то
при ее вызове сработает брейкпоинт и страничка в браузере зависнет.


Динамический url

До этого мы создавали фиксированный url, но можно создавать и динамический:

path('category/<str:category_name>', views.show_costs_category),  <конвертор:переменная_которая_хранит_динамическую_часть>

Теперь в представление можно добавить еще один аргумент

def show_costs_category(request, category_name):
    return HttpResponse(f"This is {category_name} category")

Типы, которые можно использовать (конверторы):
str - строка, любые символы кроме /
int - целое число
slug - латинские буквы + цифры + дефис + подчеркивание
uuid - цифры + маленькие латинские буквы + дефис
path - это тоже самое что str, но / использовать можно

Помимо стандартных конверторов, можно создавать и свои.
1) создаем файл для конверторов converters
2) в нем создаем класс для конвертора

class SpecStr:
    """String without underscore, numbers and backspace"""
    regex = r"[A-Za-z\-]+"  # здесь прописываем регулярное выражение, которое будет содержать возможные символы

    def to_python(self, value):  # этот метод возвращает динамическую часть в том виде, в котором она будет в функции представлении
        return str(value)  # (например если ваша динамическая часть может включать только определенные цифры то конвертировать ее нужно будет в int)
    
    def to_url(self, value):  # возвращает значение, которое будет передано в url
        return str(value)

3) регистрируем новый конвертор 

from django.urls import path, register_converter  # импортируем функцию для регистрации
from . import views
from . import converters as conv  # импортируем файл с конверторами

register_converter(conv.SpecStr, 'spec_str') # сначала конвертор, потом его название

urlpatterns = [
    path('', views.show_costs),
    path('my_costs', views.show_costs),
    path('category/<spec_str:category_name>', views.show_costs_category),  # используем также как и встроенные конверторы
]


В url запросы можно передавать определенные значения следующим образом:

http://127.0.0.1:8000/wallet/?name=Dima&password=Neskazhu

?ключ=значение&?ключ2=значение2

Эти значения хранятся в запросе, и чтобы их получить:

def show_my_money(request):
    print(request.GET)  # через коллекцию GET, или если это POST запрос через POST 
    return HttpResponse('Here is your bank account.')

Теперь если ввести этот url http://127.0.0.1:8000/wallet/?name=Dima&password=Neskazhu в то в консоли будет видна след строка:

<QueryDict: {'name': ['Dima'], 'password': ['Neskazhu']}> 

Мы видим объект класса QueryDict и два значения, которые ввели.


Обработка исключений

Для обработки исключений сначала нужно в основном конфиге 

# эта переменная отвечает за то, в каком режиме запускается проект, в тестовом (True) или в продакшн режиме (False)
DEBUG = False  # изменяем значения на False, было True

ALLOWED_HOSTS = ['127.0.0.1']  # добавляем доступ локальному серверу к джанго серверу

Сначала в любом приложении создаем представление, для обработки нужной ошибки

def page_not_found(request, exception):
    return HttpResponse('<h1>Page not found :(</h1>')

А затем в глобальном файле переадресации (urls.py) добавляем переменную 

handler404 = page_not_found

И импортируем нужную вьюшку

from wallet.views import page_not_found

Также можно сделать с еще некоторыми ошибками (а чтоб узнать с какими идем читать доку).

Еще эти исключения можно вызывать искусственно 

raise Http404()


Перенаправления (redirect)

У каждого http запроса есть код выполнения, например код 200 это успешное выполнение, а код 404 страница не найдена.
Во время разработки проекта может случится ситуация, когда какая-то страница была перемещена на другой url.
В таком случае произойдет переадресация (переход на другую страницу) и к перемещенной страница код запроса будет либо
301 - страница временно перемещена на другой url либо
302 - страница перемещена на другой url
Для того чтоб сделать редирект, в функции-представлении нужно прописать 

return redirect('/')

Предварительно импортируем redirect 

from django.shortcuts import redirect

В примере указана главная страничка, но можно поставить любую.
Теперь если мы попробуем зайти на страничку, в которой прописан редирект, то помимо самого перекидывания
на другую страничку, в терминале будет следующее:

[04/Aug/2024 16:45:36] "GET /costs/category/redirect HTTP/1.1" 302 0
[04/Aug/2024 16:45:36] "GET /wallet/ HTTP/1.1" 200 26

Чтобы код был 301, нужно указать аргумент permanent=True

return redirect('/wallet/', permanent=True)

Также в redirect можно указывать не путь, а функцию представления (ее нужно импортировать, если она в другом файле).
И помимо пути и представления, можно еще указать имя, для этого сначала его нужно указать.
В файле urls.py:

path('category/<spec_str:category_name>', views.show_costs_category, name='category'), 

И теперь можно написать следующее:

return redirect('category', permanent=True)

Этот вариант наилучший, ведь путь или представления могут меняться, в название менять не следует.
Вообще везде где нужно обратится к какой-то страничке лучше использовать имена, а не пути или представления.
И если в маршруте есть параметры (динамический url) то их нужно указывать вторым параметром.

return redirect('category', 'important')

Но тогда вопрос, а разница между 301 и 302 кодами только в выводе в терминале? - Нет
Если поставить permanent=True, то есть то, что страница перемещена (не временно) на другой url, и после этого попытаться поменять редирект,
то он не поменяется, прийдется перезапустить браузер и только после этого он изменится.

Если нужно, то можно разделить редирект, и поиск url.
Для этого используем reverse.

from django.urls import reverse

url = reverse('category', args=('important', ))
print(url)
return redirect(url)

И в терминале будет следующее:

/costs/category/important
[04/Aug/2024 20:16:53] "GET /costs/category/redirect HTTP/1.1" 302 0
[04/Aug/2024 20:16:53] "GET /costs/category/important HTTP/1.1" 200 26

Вместо функции redirect можно использовать классы HttpResponseRedirect, HttpResponsePermanentRedirect.

return HttpResponseRedirect(url)
return HttpResponsePermanentRedirect(url)



Шаблоны

Шаблоны по дефолту хранятся в папке templates в папке приложения, поэтому создаем эту папку,
и затем также важно создать папку с названием приложения в папке templates, уже в этой папке будут хранится
все шаблоны. Это нужно для того, чтоб джанго не путал шаблоны из разных приложений с одним именем.

Затем в самом простом варианте делаем следующее:

from django.template.loader import render_to_string  # импортируем нужную функцию

def show_costs(request):
    template = render_to_string('costs/main.html')  # создаем переменную, в функции render_to_string указываем путь к шаблону, относительно папки templates
    return HttpResponse(template)  # возвращаем шаблон

В шаблоне пока что просто пропишем дефолт хтмл документ

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Costs</title>
</head>

<body>
    <h3>Your costs here</h3>
</body>

</html>

Теперь у нас видна страничка.
Но можно сделать это без создания переменных, в одну строку.
Для этого импортируем render

from django.shortcuts import redirect, render

И в функции представлении прописываем 

return render(request, 'costs/main.html')  # http запрос, путь к шаблону

И теперь все работает также.
Теперь перейдем в файл конфигурации проекта (settings.py) и затем в коллекцию templates, она отвечает за работу шаблонизатора джанго.

TEMPLATES = [
    {
        # эта строка означает, что используется стандартный шаблонизатор джанго
        'BACKEND': 'django.template.backends.django.DjangoTemplates', 
        'DIRS': [],  # позволяет прописывать нестандартные пути к шаблонам
        'APP_DIRS': True,  # говорит о том, что искать шаблоны нужно в папке templates
        'OPTIONS': {  
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

Для того чтоб в шаблоне вывести переменную из представления нужно:

def show_costs_category(request, category_name):
    data = {'category_name': category_name}  # создать словарь, в котором хранится передаваемая информация

    if category_name == 'redirect':
        url = reverse('category', args=('important', ))
        # print(url)
        return HttpResponseRedirect(url)
    return render(request, 'costs/costs_categories.html', context=data)  # в параметр context передаем информацию, которую хотим передать на сайте

Затем в шаблоне

<p>Here is {{ category_name }} categories</p>  # {{ ключ_из_словаря_в_котором_лежит_информация }}

Если передать словарь то с помощью точки:

{{ dictionary.key_1}}

Можно достать значение, таким же образом можно достать атрибуты из пользовательского класса или вытащить объект из списка.

Также к вставляемым в шаблон переменным можно применять фильтры, таким образом:

def show_costs(request):
    data = {'message': 'hello'}

    return render(request, 'costs/costs.html', data)

<p>{{ message|upper }}</p> 

В итоге будет выведено 

HELLO

Также если фильтр принимает какое-то значение то его можно передать след образом:

<p>{{ message|add:"5" }}</p>

Таких фильтров есть очень много, многие из них совпадают с методами и функциями стандартного питона.

Теги шаблонов 

Теги шаблонов - это функциональные конструкции, с помощью которых можно реализовывать такие пайтоновские  
конструкции как например условные конструкции, циклы и тд.

Все теги пишутся ме жду {% тег %}.

{% for i in data %}
    <p>data.text</p>
{% endfor %}

Это тег for, смысл работы тот же, что и в обычном пайтоне, только в конце обязательно нужно написать endfor.

{% if data.status == 'user' %}
    <p>Hello, SpendSmart user!</p>
{% endif %}

Это тег if смысл работы такой же, как в пайтоне.

Но тут важно понимать, что всю логику нужно писать в представлении, а в шаблоне какой-то сложной логики быть не должно, его основная задача это отрисовка, а не логика.

Тег url

<a href="{% url 'wallet' %}">Wallet</a>

{% url 'имя_странички' arg%}

Тег url нужен для создания ссылок или тому подобного где нужно переходить на другую страницу.
После url можно написать путь, но это будет хардкодиг, поэтому лучше использовать имя (это имя, которое прописывается ва путях, в параметре name).
Если в пути есть динамическая часть, или же параметр, то ее прописываем после имени.


Базовые шаблоны.

Если у всех страничек есть какой-то общий элемент, например футер или хедер или еще что-то подобное, то его лучше не писать десять тысяч раз,
а вывести в базовый шаблон.

Для начала создаем папку для базовых шаблонов, ее создаем не в приложении, а в папке проекта

spendsmart-
  -costs
  -spendsmart
  -templates  <- это создаем
  -wallet
  db.sqlite3
  manage.
  
В ней будут хранится базовые шаблоны.
И так как это не стандартный путь для шаблонов, его нужно указать в той самой коллекции templates в папке конфигов проекта.

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',  # BASE_DIR это путь к корневой папке проекта и дальше указываем нашу папку базовых шаблонов
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

Теперь уже в этой папке создаем base.html

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title></title>
</head>

<body>
    {% block content %} {% endblock %}
    <br><br>
    <a href="{% url 'wallet' %}" style="border: 3px solid blue; color: blue; width: 150px; padding: 5px;">Wallet</a>
</body> c

</html>

В него нужно засунуть всю общую часть, а ту часть, которая уникальная для разных страничек нужно поместить в тэги блоки.
В то место где расположен тэг будет вставляться уникальная часть какого-то файла, соответственно для каждой уникальной части нужен отдельный блок, если они в разных местах.

И теперь этот базовый шаблон может унаследовать дочерний.

{% extends 'base.html' %}  # в этом теге указываем базовый шаблон

{% block content %}  # и в том самом блоке указываем динамическую часть
{% if was_found %}
<p>Here is {{ category_name }} categories</p>
<ul style="border: 1px solid black; width: 200px">
    <h2>{{ info.title }}</h2>
    <p>{{ info.desc }}</p>
</ul>
{% else%}
<p>Category not found :(</p>
{% endif %}
{% endblock %}  # не забываем динамик часть закрывать


Еще если есть какая-то часть, которая используется не во всех, но больше чем на одной страничке, ее также можно выделить.

Создаем папку для инклудов в папке шаблонов приложения

mkdir costs/templates/costs/include

И в этой папке создаем файл с частью, которую будем пихать по разным страничкам.

allcat_ref.html:

<a href="{% url 'all_categories' %}">Show all categories</a>

И теперь на страничку можно добавить след:

{% include 'costs/include/allcat_ref.html' %}

Преимущество инклудов в том, что их можно поставить сколько хочешь.


Подключение статических файлов (IMG, CSS, JS)

В тестовом режиме (DEBUG=True) джанго ищет статические в папке static, в папках приложений.
Но когда проект будет заливаться на продакшн нужно будет сделать команду 

python3 manage.py collectstatic 

Эта команда соберет статики разных приложений в одну папку static, в корневой папке проекта.

Для подключения статических файлов в настройках нужно определить три переменных

STATIC_URL - префикс URL-адреса для статических файлов.
STATIC_ROOT - путь к той самой папки для статических файлов, для продакшина.
STATICFILES_DIRS - список не стандартных путей к статическим файлам, используемых для сбора и для режима отладки.

Также если в settings.py в коллекции INSTALLED_APPS нет строчки

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',   <- этой строки
    'wallet.apps.WalletConfig',
    'costs.apps.CostsConfig',
]

То никакие статические файлы подгружаться не будут.
У STATIC_URL есть дефолтное значение 

STATIC_URL = 'static/'

Оно определяет префикс, который будет добавляться к каждому статическому файлу.

STATIC_ROOT = 'static'

Теперь если прописать python3 manage.py collectstatiс, то все статические файлы соберутся в папку static в корневой папки.
Важно понимать, что подключить их без косиков после сбора файлов в одну папку нельзя будет.
Этот сбор файлов в одну папку нужен для размещения на сервер.
Поэтому до продакшина collectstatiс делать не надо.

Если вы  файлы в нестандартном месте, например не в папке static, а в папке static_files то нужно описать этот нестандартный путь в коллекции STATICFILES_DIRS

STATICFILES_DIRS = [
    BASE_DIR / 'static_files',
]


Создание пользовательских тегов

1) simple tags

Все уникальные теги должны находится в папке templatetags в папке приложения, эта папка должна быть пакетом,
с файлом __init__.py.

Затем создаем файл, в котором и будем создавать тэги, в нашем случае это будет costs_tags.py
Теперь разберем этот файл:

from django import template  # этот модуль нужен для создания тегов
import costs.views as views  # это для вывода информации о категориях
# import views

# для регистрации новых тегов
register = template.Library()


@register.simple_tag()  # говорим что эта функция это тэг
def get_categories():
    return views.data_categories  # возвращаем информацию о категориях

Теперь в шаблоне в котором хотим использовать пользовательский тэг нужно выгрузить их

{% load costs_tags %}

И теперь наш тэг можно использовать также как и другие

Также можно результат тега поместить в переменную 

{% get_categories as categories %}

И уже с этой переменной можно выполнять циклы, условия и тд.
Также пользовательским тегам тоже можно давать имена

@register.simple_tag(name='get_all_catgs')
def get_categories():
    return views.data_categories

И теперь на страничке тоже нужно указать имя

<p>{% get_all_catgs as categories %}</p>

2) inclusion tags

Включающие тэги возвращают фрагмент html странички, а не просто какие-то данные.
Это, по факту, тоже самое что и обычные инклуды, но в них можно передавать данные.

@register.inclusion_tag('costs/include/menu.html')  # здесь прописываем путь к html в которую передадутся данные
def show_menu():
    ref = [
        {'title': 'Wallet', 'url_name': 'wallet'},
        {'title': 'Costs', 'url_name': 'costs'},
    ]
    return {'ref': ref}  # передаем данные

Затем создаем саму html

<div class="menu">
    {% for r in ref %}  # ref передается из пользовательского тега
    <div class="ref-block">
        <a href="{% url r.url_name %}" class="ref"> {{ r.title }} </a>
    </div>
    {% endfor %}
</div>



Модель 

Модель - отвечает работу с базой данных.
ORM (Object-Relational Mapping) - механизм, для взаимодействия с бд, с помощью классов пайтона.

За бд в джанго отвечает коллекция DATABASES в файле settings

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3', # субд
        'NAME': BASE_DIR / 'db.sqlite3',  # путь к файлу с базой
    }
}

Модель каждого приложения создается в файле models.
Базы данных создаются следующим образом:

from django.db import models

# имя должно быть такое же как и у бд
class Costs(models.Model):  # класс обязательно должен наследовать Model
    # поле id прописывать не надо, оно создастся автоматически
    # сначала идет имя столбца, потом тип
    title = models.CharField(max_length=40)    
    price = models.FloatField(max_length=11)
    time_create = models.DateTimeField(auto_now_add=True)
    deadline = models.DateTimeField()
    status = models.ChatField(max_length=6)
 

Затем, после создания модели, чтобы база данных создалась нужно создать и запустить файлы миграции.
У каждого приложения есть файл с миграциями и при их создании они будут там появляться. 
Эта система похожа на систему контроля версий потому, что миграции хранятся последовательно и можно 
в любой момент откатиться до другой версии.
Для создания миграций нужна команда:

python3 manage.py makemigrations

Чтоб посмотреть какой запрос к бд будет делать миграция пишем:

python3 manage.py sqlmigrate <приложение> <только номер миграции, которую нужно выполнить>

Выполнить миграцию

python3 manage.py migrate


